---
import * as fs from "fs";
//@ts-ignore
import {JSDOM} from "jsdom";
//@ts-ignore
import * as d3 from "d3";
//@ts-ignore
import { parse } from 'csv-parse/sync';
//@ts-ignore
import * as topojson from "topojson-client";
import Layout from "../layouts/Layout.astro";
import { glob } from 'glob'

// ----------------------------------------------------- Domain model -----------------------------------------------------
// type representing participants.csv
type Participant = {
    Title: string;
    Name: string;
    Institution_Name: string;
    Affiliation: string;
    Link: string;
    City: string;
    Role: string;
};

// type representing projects.csv
type Project = {
    Name: string;
    Institution_Name: string;
    Link: string;
    City: string;
    Role: string;
};

// type representing places.csv
type Place = {
    Name: string;
    Latitude: number;
    Longitude: number;
    IsApplicant: boolean;
};
// type representing institutions.csv
type Institution = {
    Name: string;
    City:string;
    Link: string;
};

// holds tooltip data for tippy.js
type TippyData = {
    name: string;
    info: string;
    longitude: number;
    latitude: number;
    type: string;
}

// fully grouped participant and project data by place, then institution
type LocalizedGroup = {
    place: string;
    groupedInstitutions: [Institution, Participant[], Project[]][]
    longitude: number;
    latitude: number;
    type: string
}

// ----------------------------------------------------- Utility Functions -----------------------------------------------------

// Utility: format a person's name with their role
const formatName = function(p: Participant) {
    return (p.Title ? `${p.Title} ` : '') + p.Name;
};

const createParticipantLink = function(p: Participant) {
    return `<a href="${p.Link}" class="text-olive-800">${formatName(p)}</a>`;
};

const createProjectLink = function(p: Project) {
    return `<a href="${p.Link}" class="text-olive-800">${p.Name}</a>`;
};

const createInstitutionLink = function(i: Institution) {
    return `<a class="text-lg text-olive-800" href="${i.Link}">${i.Name}</a>`;
};

// Utility: make an HTML list with a heading (for People and Projects)
const makeList = function(heading: string, entries: string []) {
    if (entries.length === 0) return ''; // Do not show if no entries
    return  `<h2 class="subtitle text-base">${heading}</h2>` +
            '<ul class="list-disc list-inside">' +
            entries.map(e => `<li>${e}</li>`).join('') +
            '</ul>';
};

// Combine data for each institution (people + projects) for tippy tooltips
function combineInstitutionData(institution: Institution, people: Participant[], projects: Project []) {

    // Show the institution name as a header (h4), and then lists of people and projects
    const combinedEntries = [
        `${createInstitutionLink(institution)}`,
        makeList('People', people.map(p => createParticipantLink(p))),
        makeList('Projects', projects.map(p => createProjectLink(p)))
    ];
    return combinedEntries.join('');
    }

// ----------------------------------------------------- Data import -----------------------------------------------------
const participants_path = await glob("src/assets/data/participants.csv")
const participants_headers = ["Title","Name","Institution_Name","Affiliation","Link","City","Role"]
const participants_file_content  = fs.readFileSync(participants_path[0], { encoding: 'utf8', flag: 'r' });

const participants: Participant[] = 
    parse(participants_file_content, {
        delimiter: ',',
        columns: participants_headers,
    })

const projects_path = await glob("src/assets/data/projects.csv");
const projects_headers = ["Name","Institution_Name","Link","City","Role"]
const projects_file_content  = fs.readFileSync(projects_path[0], { encoding: 'utf8', flag: 'r' });

const projects: Project[] =
    parse(projects_file_content, {
        delimiter: ',',
        columns: projects_headers,
        skip_empty_lines: true
    })

const places_path = await glob("src/assets/data/places.csv")
const places_headers = ["Name", "Latitude", "Longitude", "IsApplicant"]
const places_file_content  = fs.readFileSync(places_path[0], { encoding: 'utf8', flag: 'r' });

const places: Place[] = 
    parse(places_file_content, {
        delimiter: ',',
        columns: places_headers,
        skip_empty_lines: true,
        cast: function (value, context) {
            if (context.index === 3) {
                return value.toLowerCase() == 'true' // is there really nothing better thah this? lol
            } else {
                return value 
            }
        }
    })

console.log(places)

const institutions_path = await glob("src/assets/data/institutions.csv")
const institutions_headers = ["Name", "City", "Link"]
const institutions_file_content  = fs.readFileSync(institutions_path[0], { encoding: 'utf8', flag: 'r' });

const institutions: Institution[] = 
    parse(institutions_file_content, {
        delimiter: ',',
        columns: institutions_headers,
        skip_empty_lines: true
    })

places.shift(); // remove header row, idk why the parser includes it 
participants.shift(); // remove header row, idk why the parser includes it
projects.shift(); // remove header row, idk why the parser includes it
institutions.shift(); // remove header row, idk why the parser includes it

const germany_path = await glob("src/assets/data/germany.json")
const germany = JSON.parse(fs.readFileSync(germany_path[0], { encoding: 'utf8', flag: 'r' }))
const germany_features = topojson.feature(germany, germany.objects.states)

// ----------------------------------------------------- Data processing -----------------------------------------------------
const projectsByInstitution = d3.group(projects, p => p.Institution_Name);
const participantsByInstitution = d3.group(participants, p => p.Institution_Name);
const institutionsByCity = d3.group(institutions, i => i.City);

const localizedGroups : LocalizedGroup [] = 
    places
    .filter((place) => institutionsByCity.has(place.Name))
    .map((place) => {
        console.log(place.Name)
        console.log(institutionsByCity.has(place.Name))
        return {
            place: place.Name,
            groupedInstitutions: 
                institutionsByCity.get(place.Name)!
                .map((institutions) => {
                    return [
                        institutions,
                        participantsByInstitution.get(institutions.Name) || [],
                        projectsByInstitution.get(institutions.Name) || []
                    ];
                }),

            longitude: place.Longitude,
            latitude: place.Latitude,
            type: place.IsApplicant ? 'applicant' : 'normal'
        };
    })

const geo_places : TippyData [] = 
    localizedGroups
    .map((lg) => {
        return {
            name: lg.place,
            info: 
                `<h1 class="title underline text-2xl">${lg.place}</h1>` +
                lg.groupedInstitutions.map(([inst, participants, projects]) => {
                    return combineInstitutionData(inst, participants, projects);
                })
                .join(''),
            longitude: lg.longitude,
            latitude: lg.latitude,
            type: lg.type
        };
    });
// ----------------------------------------------------- Map rendering -----------------------------------------------------
const projection = d3.geoConicConformal().center([20.22, 49.3]).scale(2750);
const geo_path = d3.geoPath().projection(projection);

// we use a virtual dom to generate the svg and then inject it into the page on ssr. No client-side rendering needed.
const { document } = new JSDOM().window

// begin map drawing

// base svg element
const svg = 
    d3
    .select(document.body)
    .append("svg")
    .attr("viewBox", [0, 0, 300, 400])

// add topography features
svg
.append("g")
.selectAll("path")
//@ts-ignore
.data(germany_features.features)
.join("path")
//@ts-ignore
.attr("d", geo_path)
.classed("map", true);

// add places as circles and add tippy data
svg
    .append("g")
    .selectAll("circle")
    .data(geo_places)
    .join("circle")
    .classed("place", true)
    .attr("r", 5)
    .attr("transform", function(d: any) {
        return "translate(" + projection([
            d.longitude as number,
            d.latitude as number 
        ]) + ")"
    })
    .attr('data-tippy-content', (d: any)=> d.info)
    .attr('data-place-type', (d: any) => d.type)

// add places as circles and add tippy data
svg
    .append("g")
    .selectAll("text")
    .data(geo_places)
    .join("text")
    .classed("map-text", true)
    .text((d: any) => d.name)
    .attr('text-anchor', "middle")
    .attr('dy',10)
    .attr("transform", function(d: any) {
        return "translate(" + projection([
            d.longitude as number,
            d.latitude as number 
        ]) + ")"
    })

---

<Layout title = "Community and Partners" description="Explore our community and partners!">
    <div class="mx-auto w-full max-w-6xl pb-10 lg:py-12 lg:px-8">
        <div class ="card glass shadow-xl p-6 m-4">
            <div class ="card-content">
                <h1 class="card-title text-4xl mb-4">Our Community and Partners</h2>
                <h2 class="card-title text-2xl mb-4">Interactively explore the map or browse the lists below to find out more about who makes DataPLANT</h2>
                <div id="dataplant-map" set:html={document.body.innerHTML}></div>
            </div>
        </div>
        
        <!-- Start Map section 
            svg is rendered on build, and injected as inner html into this div.
            No client-side rendering needed.
        -->
        <!-- End Map section -->

        <!-- Start Tooltip section
        Inline scripts needed to render client-side tooltips -->
        <script is:inline src="https://unpkg.com/@popperjs/core@2/dist/umd/popper.min.js"></script>
        <script is:inline src="https://unpkg.com/tippy.js@6/dist/tippy-bundle.umd.js"></script>
        <script is:inline>
            tippy('.place', {
                appendTo: (_) => document.querySelector('#dataplant-map'),
                interactive: true,
                arrow: false,
                maxWidth: 'none',
                allowHTML: true,
                theme: 'custom',
                delay: [100, 100]
            });
        </script>
        <!-- End Tooltip section -->
        {
            localizedGroups
            .sort((a, b) => a.place.localeCompare(b.place))
            .map((lg) => (
                <div class ="card glass shadow-xl p-6 m-4">
                    <div class ="card-content">
                        <h1 class="card-title anchor text-darkblue underline font-bold text-3xl mb-4 anchor"><a href={"#" + lg.place} class="anchor-link">{lg.place}</a></h1>
                        {
                            lg.groupedInstitutions
                            .map(([institution, participants, projects]) => (
                                <h2 class="text-2xl mb-4 font-semibold text-olive-800"><a href={institution.Link}>{institution.Name}</a></h2>
                                <>
                                {   
                                    participants.length > 0 &&
                                    <h3 class="text-xl mb-4 font-semibold">Participants</h3>
                                    <table class="table table-fixed table-zebra table-md mb-4">
                                        <thead>
                                            <tr>
                                                <th>Name</th>
                                                <th>Role</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                        {
                                            participants
                                            .sort((a, b) => a.Role.localeCompare(b.Role))
                                            .reverse()
                                            .map(p => 
                                                <tr>
                                                    <td><a class="text-olive-700" href={p.Link}>{formatName(p)}</a></td>
                                                    <td>{p.Role}</td>
                                                </tr>
                                            )
                                        }
                                        </tbody>
                                    </table>
                                }
                                </>
                                <>
                                {   
                                    projects.length > 0 &&
                                    <h3 class="text-xl mb-4 font-semibold">Projects</h3>
                                    <table class="table table-fixed table-zebra table-md mb-4">
                                        <thead>
                                            <tr>
                                                <th>Name</th>
                                                <th>Role</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                        {
                                            projects
                                            .sort((a, b) => a.Role.localeCompare(b.Role))
                                            .reverse()
                                            .map(p => 
                                                <tr>
                                                    <td><a class="text-olive-700" href={p.Link}>{p.Name}</a></td>
                                                    <td>{p.Role}</td>
                                                </tr>
                                            )
                                        }
                                        </tbody>
                                    </table>
                                }
                                </>
                            ))
                        }

                    </div>
                </div>
            ))
        }
    </div>
    <style is:global>
        /* Inline styles for map, might refactor */
        #dataplant-map {
            margin: 0 auto;
            overflow: visible;
            max-width: 600px;
        }
        #dataplant-map > svg .map {
            fill: #C2E5CD;
            stroke: #FFFFFF;
            stroke-width: 1px;
            vector-effect: non-scaling-stroke;
        }

        #dataplant-map > svg .place {
            fill: #137464;
            stroke: #FFFFFF;
            stroke-width: 0.03rem;
            cursor: help;
        }

        #dataplant-map > svg .place[data-place-type=applicant] {
            fill: #1FC2A7;
        }

        #dataplant-map > svg .map-text {
            font-size: 0.3rem;
            fill: #000000;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .tippy-box[data-theme~="custom"] {
            margin: 2rem 2rem 1rem 1rem;
            background-color: rgba(255,255,255,0.95);
            color: black;
            border: 1px solid #137464;
            border-radius: 15;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
    </style>
</Layout>